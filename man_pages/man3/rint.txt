RINT(3)                    Linux Programmer's Manual                   RINT(3)



NAME
       nearbyint,  nearbyintf, nearbyintl, rint, rintf, rintl - round to near‐
       est integer

SYNOPSIS
       #include <math.h>

       double nearbyint(double x);
       float nearbyintf(float x);
       long double nearbyintl(long double x);

       double rint(double x);
       float rintf(float x);
       long double rintl(long double x);

       Link with -lm.

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       nearbyint(), nearbyintf(), nearbyintl():
           _XOPEN_SOURCE >= 600 || _POSIX_C_SOURCE >= 200112L ||
           _ISOC99_SOURCE;
           or cc -std=c99
       rint():
           _BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE >= 500 ||
           _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE ||
           _POSIX_C_SOURCE >= 200112L;
           or cc -std=c99
       rintf(), rintl():
           _BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE >= 600 ||
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L;
           or cc -std=c99

DESCRIPTION
       The nearbyint(), nearbyintf(), and nearbyintl() functions  round  their
       argument  to  an integer value in floating-point format, using the cur‐
       rent rounding direction (see fesetround(3))  and  without  raising  the
       inexact exception.

       The  rint(), rintf(), and rintl() functions do the same, but will raise
       the inexact exception (FE_INEXACT, checkable via fetestexcept(3))  when
       the result differs in value from the argument.

RETURN VALUE
       These functions return the rounded integer value.

       If x is integral, +0, -0, NaN, or infinite, x itself is returned.

ERRORS
       No  errors  occur.  POSIX.1-2001 documents a range error for overflows,
       but see NOTES.

ATTRIBUTES
   Multithreading (see pthreads(7))
       The  nearbyint(),  nearbyintf(),  nearbyintl(),  rint(),  rintf(),  and
       rintl() functions are thread-safe.

CONFORMING TO
       C99, POSIX.1-2001.

NOTES
       SUSv2  and  POSIX.1-2001  contain  text about overflow (which might set
       errno to ERANGE, or raise an FE_OVERFLOW exception).  In practice,  the
       result  cannot  overflow on any current machine, so this error-handling
       stuff is just nonsense.  (More precisely, overflow can happen only when
       the  maximum  value  of the exponent is smaller than the number of man‐
       tissa bits.  For the IEEE-754 standard 32-bit and 64-bit floating-point
       numbers  the maximum value of the exponent is 128 (respectively, 1024),
       and the number of mantissa bits is 24 (respectively, 53).)

       If you want to store the rounded value in an integer type, you probably
       want to use one of the functions described in lrint(3) instead.

SEE ALSO
       ceil(3), floor(3), lrint(3), round(3), trunc(3)

COLOPHON
       This  page  is  part of release 3.55 of the Linux man-pages project.  A
       description of the project, and information about reporting  bugs,  can
       be found at http://www.kernel.org/doc/man-pages/.



                                  2013-08-26                           RINT(3)
